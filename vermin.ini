# Sample Vermin Configuration
#
# It contains all config options with default values commented out.
# The file is typically renamed as "vermin.ini" when copied into a project.

[vermin]
### Quiet mode ###
# It only prints the final versions verdict.
#
#quiet = no

### Verbosity ###
# Verbosity level 1 to 4. -v, -vv, -vvv, and -vvvv shows increasingly more information. Turned off
# at level 0.
#
verbose = 3

### Dump AST node visits ###
# Only for debugging.
#
#print_visits = no

### Matching target versions ###
# Target version that files must abide by. Can be specified once or twice.
# A '-' can be appended to match target version or smaller, like '3.5-'.
# If not met Vermin will exit with code 1.
# Note that the amount of target versions must match the amount of minimum required versions
# detected.
#
# Examples:
targets = 3.6

### Concurrent processing ###
# Use N concurrent processes to detect and analyze files. Defaults to 0, meaning all cores
# available.
#
#processes = 0

### Ignore incompatible versions and warnings ###
# However, if no compatible versions are found then incompatible versions will be shown in the end
# to not have an absence of results.
#
#ignore_incomp = no

### Lax mode ###
# It ignores conditionals (if, ternary, for, async for, while, with, try, bool op) on AST traversal,
# which can be useful when minimum versions are detected in conditionals that it is known does not
# affect the results.
#
# Note: It is better to use excludes or `# novermin`/`# novm` in the source code instead.
#
#lax = no

### Hidden analysis ###
# Analyze 'hidden' files and folders starting with '.' (ignored by default when not specified
# directly).
#
analyze_hidden = yes

### Tips ###
# Possibly show helpful tips at the end, like those relating to backports or lax mode.
#
#show_tips = yes

### Pessimistic mode ###
# Syntax errors are interpreted as the major Python version in use being incompatible.
#
pessimistic = yes

### Exclusions ###
# Exclude full names, like 'email.parser.FeedParser', from analysis. Useful to ignore conditional
# logic that can trigger incompatible results. It's more fine grained than lax mode.
#
# Exclude 'foo.bar.baz' module/member: foo.bar.baz
# Exclude 'foo' kwarg:                 somemodule.func(foo)
# Exclude 'bar' codecs error handler:  ceh=bar
# Exclude 'baz' codecs encoding:       ce=baz
#
# Example exclusions:
#exclusions =
#  email.parser.FeedParser
#  argparse.ArgumentParser(allow_abbrev)

### Backports ###
# Some features are sometimes backported into packages, in repositories such as PyPi, that are
# widely used but aren't in the standard language. If such a backport is specified as being used,
# the results will reflect that instead.
#
# Get full list via `--help`.
#
# Example backports:
backports =
  typing

### Features ###
# Some features are disabled by default due to being unstable but can be enabled explicitly.
#
# Get full list via `--help`.
#
# Example features:
features =
  fstring-self-doc

### Format ###
# Format to show results and output in.
#
# Get full list via `--help`.
#
#format = default

### Annotations evaluation ###
# Instructs parser that annotations will be manually evaluated in code, which changes minimum
# versions in certain cases. Otherwise, function and variable annotations are not evaluated at
# definition time. Apply this argument if code uses `typing.get_type_hints` or
# `eval(obj.__annotations__)` or otherwise forces evaluation of annotations.
#
eval_annotations = yes

### Violations ###
#
only_show_violations = yes
