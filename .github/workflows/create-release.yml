on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_run:
    workflows: [ "Vendor Update" ]
    types:
      - completed

name: Create Release

jobs:
  release:
    name: GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Check Version
        run: |
          python -m pip install -e .
          echo "PCAPKIT_VERSION=$(python -c 'import pcapkit; print(pcapkit.__version__)')" >> $GITHUB_ENV
          echo "PCAPKIT_PRERELEASE=$(python3 -c 'import pcapkit, pkg_resources; print(str(pkg_resources.parse_version(pcapkit.__version__).is_prerelease).lower())')" >> $GITHUB_ENV

          echo "PCAPKIT_LATEST=v$(git tag --sort version:refname | tail -n 2 | head -n 1)" >> $GITHUB_ENV

      - name: Install and Setup
        if: ${{ env.PCAPKIT_LATEST != env.PCAPKIT_VERSION }}
        run: |
          set -x

          python -m pip install -U pip setuptools wheel
          python -m pip install -U build

      - name: Build PyPI
        if: ${{ env.PCAPKIT_LATEST != env.PCAPKIT_VERSION }}
        run: |
          python -m build

      - name: Build Anaconda
        if: ${{ env.PCAPKIT_LATEST != env.PCAPKIT_VERSION }}
        run: |
          # TODO: Anaconda distro

      - name: Publish to PyPI
        if: ${{ env.PCAPKIT_LATEST != env.PCAPKIT_VERSION }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: Publish package to TestPyPI
        if: ${{ env.PCAPKIT_LATEST != env.PCAPKIT_VERSION }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

      - name: Changelog
        if: ${{ env.PCAPKIT_LATEST != env.PCAPKIT_VERSION }}
        uses: Bullrich/generate-release-changelog@master
        id: changelog
        env:
          REPO: ${{ github.repository }}

        # run: |
        #   # NOTE: inspired from Bullrich/generate-release-changelog
        #   # https://github.com/Bullrich/generate-release-changelog/blob/master/entrypoint.sh

        #   tag=$(git tag --sort version:refname | tail -n 2 | head -n 1)
        #   echo tag=$tag

        #   if [ "$tag" ]; then
        #     changelog=$(git log --oneline --no-decorate $tag..HEAD)
        #   else
        #     changelog=$(git log --oneline --no-decorate)
        #   fi

        #   echo $changelog

        #   changelog="${changelog//'%'/'%25'}"
        #   changelog="${changelog//$'\n'/'%0A' - }"
        #   changelog=" - ${changelog//$'\r'/'%0D'}"

        #   echo "PCAPKIT_CHANGELOG=$changelog" >> $GITHUB_ENV

      - name: Create Release
        if: ${{ env.PCAPKIT_LATEST != env.PCAPKIT_VERSION }}
        id: create_release
        uses: ncipollo/release-action@v1.12.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          # allowUpdates: true
          artifacts: |
            dist/*
          # body: ${{ env.PCAPKIT_CHANGELOG }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
          # generateReleaseNotes: true
          # makeLatest: true
          name: PyPCAPKit v${{ env.PCAPKIT_VERSION }}
          prerelease: ${{ env.PCAPKIT_PRERELEASE }}
          tag: "v${{ env.PCAPKIT_VERSION }}"
          token: "${{ secrets.GITHUB_TOKEN }}"
